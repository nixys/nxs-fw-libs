#!/bin/bash

BUILD_DIR="/tmp/nxs-build"

P_NAME="nxs-fw-libs"

VER="1.13.4"
EDITION="1.13"
BUILD_VERSION="1"

RELEASE=""
command="build"
BUILD_TYPE="docker"
USE_CHOWN="false"
DEB_TAR_ORIG=""

USER=`whoami`

HELP_MSG="Simple script to make packages for different OS releases.\n\
\n\
Options:\n\
        -r RELEASE     : make build for specified OS release (e.g. debian:9, centos:7, etc). You may use 'all' to make builds for all releases.\n\
        -c COMMAND     : at this moment only 'build' command is available.\n\
        -t BUILD_TYPE  : specify how to make your build ('docker' or 'local'). 'local' build would be useful for CI/CD process.\n\
        -C             : if specified, chown command with sudo for output files will be used after build process is finished\n\
        -d DEB_TAR_ORIG: use debian tar orig file to make package. It is useful if you make packages for debian:8 and debian:9 together.\n\
        -h             : show help message (this message).\n\
"

while getopts c:r:t:Cd:h option
do
	case "${option}" in
		r) RELEASE=${OPTARG};;
		c) command=${OPTARG};;
		t) BUILD_TYPE=${OPTARG};;
		C) USE_CHOWN="true";;
		d) DEB_TAR_ORIG=${OPTARG};;
		h) echo -e ${HELP_MSG}; exit 0;;
	esac
done

if [ "${RELEASE}" == "" ];
then

	echo -n "Input OS (e.g. debian:9): "
	read RELEASE
fi

if [ ! "${BUILD_TYPE}" == "docker" ] && [ ! "${BUILD_TYPE}" == "local" ];
then

	echo "Wrong build type. Only 'docker' or 'local' types are available."
	exit 1
fi

function copy_source()
{
	local dst_package_dir="$1"
	
	# Coping source code into build environment
	rsync -qr \
		./core/modules \
		./core/Makefile \
		./core/nxs-fw-mods-desc.conf \
		LICENSE \
		README.md \
		${dst_package_dir}
}

function build_package_deb_local()
{
	local build_path="$1"
	local tpl_path="${build_path}/deb-tpl"
	
	(
		cd ${build_path}/${P_NAME}-${EDITION}

		dh_make -p ${P_NAME}-${EDITION}_${VER} --copyright lgpl3 --single --templates ${tpl_path} --yes --createorig
	
		dpkg-buildpackage
	)
}

function build_package_deb()
{

	r=$1

	bv="deb${r}u${BUILD_VERSION}"
	
	local deb_tar_orig_path="$2"

	local dst_root_dir="${BUILD_DIR}/${P_NAME}-${EDITION}/debian-${r}"
	local dst_package_dir="${dst_root_dir}/${P_NAME}-${EDITION}"
	local dst_install_file="${dst_root_dir}/deb-tpl/${P_NAME}-${EDITION}.install"
	local dc_name="nxs-build_${P_NAME}-${EDITION}_debian:${r}"

	# Preparing docker image
	if [ "${BUILD_TYPE}" == "docker" ];
	then
	
		docker build -t ${dc_name} build-pkgs-conf/docker/debian-${r} || exit 1
	fi

	# Preparing build environment
	rm -rf ${dst_root_dir} || exit 1
	mkdir -p ${dst_package_dir} || exit 1
	
	if [ -z "${deb_tar_orig_path}" ];
	then
	
		mkdir -p ${dst_package_dir}/objs || exit 1
	
		copy_source ${dst_package_dir}
	else
	
		cp ${deb_tar_orig_path} ${dst_root_dir}
		tar -xpJf ${deb_tar_orig_path} -C ${dst_package_dir}
	fi

	# Docker build script
	rsync build-pkgs-conf/docker/deb-build.sh "${dst_root_dir}" || exit 1

	# Debian package template
	rsync -r build-pkgs-conf/tpls/debian-${r}/ ${dst_root_dir}/deb-tpl || exit 1
	sed -i 's/\$\$BUILD_VERSION\$\$/'${bv}'/g' ${dst_root_dir}/deb-tpl/changelog || exit 1

	truncate -s 0 ${dst_install_file}

	for i in `find ./core/modules -type f -name "*.h"`;
	do
		src=`echo $i | sed 's/\/core//g'`
		dst=`echo $i | sed 's/\.\/core\/modules\///g' | xargs -n1 dirname`
		echo "$src /usr/include/${P_NAME}/${EDITION}/$dst" | tee --append ${dst_install_file} > /dev/null
	done

	for a in `echo "libnxs-cfg-json.a libnxs-curl.a libnxs-general.a libnxs-json.a libnxs-mysql.a libnxs-ncurses.a libnxs-rest-api.a libnxs-xml.a"`;
	do
		echo "./objs/$a /usr/lib/${P_NAME}/${EDITION}" | tee --append ${dst_install_file} > /dev/null
	done

	echo "./nxs-fw-mods-desc.conf /usr/share/${P_NAME}/${EDITION}" | tee --append ${dst_install_file} > /dev/null

	if [ "${BUILD_TYPE}" == "docker" ];
	then
	
		# Docker build package
		docker run -it --rm -v "${dst_root_dir}:/tmp/build" -e "DEBEMAIL=$DEBEMAIL" -e "DEBFULLNAME=$DEBFULLNAME" ${dc_name} /tmp/build/deb-build.sh ${P_NAME}-${EDITION} ${VER} || exit 1
	else
	
		build_package_deb_local "${dst_root_dir}"
	fi
	
	# Change owner from root to current user
	if [ "${USE_CHOWN}" == "true" ];
	then
	
		sudo chown -R ${USER} ${dst_root_dir}
	fi

	# Remove junk
	rm -rf ${dst_package_dir} 2>/dev/null
	rm -rf ${dst_root_dir}/deb-tpl 2>/dev/null
	rm -rf ${dst_root_dir}/deb-build.sh 2>/dev/null

	return 0
}

function build_package_centos_local()
{
	local build_path="$1"

	(
		cd "${build_path}"
		
		tar zcfv ${P_NAME}-${EDITION}-${VER}.tar.gz ${P_NAME}-${EDITION}-${VER}
		
		rpmbuild --define "_rpmdir ${build_path}" --define "_srcrpmdir ${build_path}" --define "_sourcedir ${build_path}" --target=x86_64 -ba "${build_path}/${P_NAME}-${EDITION}.spec"
		
		cp ${build_path}/x86_64/* ${build_path}/
		
		rm -rf ${build_path}/x86_64/
		
		rm ${P_NAME}-${EDITION}-${VER}.tar.gz
	)
}

function build_package_centos()
{

	r=$1
	
	local headers=""
	local headers_dir=""
	local static_libs=""
	local desc=""
	local files=""
	
	local dst_root_dir="${BUILD_DIR}/${P_NAME}-${EDITION}/centos-${r}"
	local dst_package_dir="${dst_root_dir}/${P_NAME}-${EDITION}-${VER}"
	local dst_spec_file="${dst_root_dir}/${P_NAME}-${EDITION}.spec"
	local dc_name="nxs-build_${P_NAME}-${EDITION}_centos:${r}"

	# Preparing docker image
	if [ "${BUILD_TYPE}" == "docker" ];
	then
	
		docker build -t ${dc_name} build-pkgs-conf/docker/centos-${r} || exit 1
	fi

	# Preparing build environment
	rm -rf "${dst_root_dir}" || exit 1
	mkdir -p "${dst_package_dir}" || exit 1
	mkdir -p "${dst_package_dir}/objs" || exit 1
	
	copy_source ${dst_package_dir}
	
	# Docker build script
	cp build-pkgs-conf/docker/rpm-build.sh "${dst_root_dir}" || exit 1

	# Centos spec file
	cp build-pkgs-conf/tpls/centos-${r}/${P_NAME}.spec ${dst_spec_file} || exit 1
	
	sed -i 's/\$\$EDITION\$\$/'${EDITION}'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$BUILD_VERSION\$\$/'${BUILD_VERSION}'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$VERSION\$\$/'${VER}'/g' ${dst_spec_file} || exit 1
	
	headers_dir="${headers_dir}mkdir -p \$RPM_BUILD_ROOT/usr/lib/${P_NAME}/${EDITION}\n"
	headers_dir="${headers_dir}mkdir -p \$RPM_BUILD_ROOT/usr/share/${P_NAME}/${EDITION}\n"
	headers_dir=`echo "${headers_dir//\//\\\/}"`
	
	desc="${desc}cp ./nxs-fw-mods-desc.conf \$RPM_BUILD_ROOT/usr/share/${P_NAME}/${EDITION}/nxs-fw-mods-desc.conf\n"
	desc=`echo "${desc//\//\\\/}"`
	
	files="${files}/usr/share/${P_NAME}/${EDITION}/nxs-fw-mods-desc.conf\n"
	files=`echo "${files//\//\\\/}"`
	
	for i in `find ./core/modules -type f -name "*.h"`;
	do
		src=`echo ${i} | sed 's/\/core//g'`
		dst=`echo ${i} | sed 's/\.\/core\/modules\///g' | xargs -n1 dirname`
		
		h_entry="cp ${src} \$RPM_BUILD_ROOT/usr/include/${P_NAME}/${EDITION}/${dst}"
		h_entry=`echo "${h_entry//\//\\\/}"`
		headers="${headers}${h_entry}\n"
		
		hd_entry="mkdir -p \$RPM_BUILD_ROOT/usr/include/${P_NAME}/${EDITION}/${dst}"
		hd_entry=`echo "${hd_entry//\//\\\/}"`
		headers_dir="${headers_dir}${hd_entry}\n"
		
		f_entry=`basename ${src}`
		f_entry="/usr/include/${P_NAME}/${EDITION}/${dst}/${f_entry}"
		f_entry=`echo "${f_entry//\//\\\/}"`
		files="${files}${f_entry}\n"
	done

	for a in `echo "libnxs-cfg-json.a libnxs-curl.a libnxs-general.a libnxs-json.a libnxs-mysql.a libnxs-ncurses.a libnxs-rest-api.a libnxs-xml.a"`;
	do
		sl_entry="cp ./objs/$a \$RPM_BUILD_ROOT/usr/lib/${P_NAME}/${EDITION}"
		sl_entry=`echo "${sl_entry//\//\\\/}"`
		static_libs="${static_libs}${sl_entry}\n"
		
		f_entry="/usr/lib/${P_NAME}/${EDITION}/${a}"
		f_entry=`echo "${f_entry//\//\\\/}"`
		files="${files}${f_entry}\n"
	done
	
	sed -i 's/\$\$HEADERS_DIR\$\$/'"${headers_dir}"'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$DESC\$\$/'"${desc}"'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$HEADERS\$\$/'"${headers}"'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$STATIC_LIBS\$\$/'"${static_libs}"'/g' ${dst_spec_file} || exit 1
	sed -i 's/\$\$FILES\$\$/'"${files}"'/g' ${dst_spec_file} || exit 1
	
	if [ "${BUILD_TYPE}" == "docker" ];
	then
	
		# Docker build package
		docker run -it --rm -v "${dst_root_dir}:/tmp/build" ${dc_name} /tmp/build/rpm-build.sh ${P_NAME}-${EDITION} ${VER} || exit 1
	else
	
		build_package_centos_local "${dst_root_dir}"
	fi
	
	# Change owner from root to current user
	if [ "${USE_CHOWN}" == "true" ];
	then
	
		sudo chown -R ${USER} "${dst_root_dir}"
	fi
	
	# Remove junk
	rm -rf "${dst_package_dir}" 2>/dev/null
	rm -rf "${dst_spec_file}" 2>/dev/null
	rm -rf "${dst_root_dir}/rpm-build.sh" 2>/dev/null
	
	return 0
}

function build_package()
{
	case ${RELEASE} in
		"debian:7" )
			build_package_deb 7 "${DEB_TAR_ORIG}"
			;;

		"debian:8" )
			build_package_deb 8 "${DEB_TAR_ORIG}"
			;;

		"debian:9" )
			build_package_deb 9 "${DEB_TAR_ORIG}"
			;;

		"centos:6" )
			build_package_centos 6
			;;

		"centos:7" )
			build_package_centos 7
			;;

		"all" )
			build_package_deb 7
			if [ $? -ne 0 ];
			then
				echo "can't build package: debian:7"
				exit 1
			fi

			build_package_deb 8
			if [ $? -ne 0 ];
			then
				echo "can't build package: debian:8"
				exit 1
			fi

			build_package_deb 9 "${BUILD_DIR}/${P_NAME}-${EDITION}/debian-8/${P_NAME}-${EDITION}_${VER}.orig.tar.xz"
			if [ $? -ne 0 ];
			then
				echo "can't build package: debian:9"
				exit 1
			fi

			build_package_centos 6
			if [ $? -ne 0 ];
			then
				echo "can't build package: centos:6"
				exit 1
			fi
			
			build_package_centos 7
			if [ $? -ne 0 ];
			then
				echo "can't build package: centos:7"
				exit 1
			fi
			;;

		*)
			echo "unknown release"
			;;
	esac
}

case $command in

	build)

		build_package
		;;

	*)

		echo "Unknown command: $command"
		;;
esac
