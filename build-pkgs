#!/bin/bash

if [ $# -eq 0 ];
then

	command='build'
else

	command=$1
fi

echo -n "Input release: "
read RELEASE

echo -n "Input edition: "
read EDITION

echo -n "Input nxs-fw-libs code version: "
read VER

P_NAME="nxs-fw-libs"

function build_package()
{

	rm -rf /tmp/nxs/${P_NAME}-${EDITION}

	mkdir -p /tmp/nxs/${P_NAME}-${EDITION}

	rsync -av ./core/* /tmp/nxs/${P_NAME}-${EDITION} \
		--exclude "objs/*"

	cp LICENSE /tmp/nxs/${P_NAME}-${EDITION}
	cp README.md /tmp/nxs/${P_NAME}-${EDITION}

	(

		TPL_PATH=`pwd`/build-pkgs-tpls/debian/${RELEASE}

		cd /tmp/nxs/${P_NAME}-${EDITION}

		clean_build_files

		dh_make -p ${P_NAME}-${EDITION}_${VER} --copyright lgpl3 --single --templates ${TPL_PATH} --yes --createorig

		echo -n > ./debian/${P_NAME}-${EDITION}.install

		for i in `find ./modules -type f -name "*.h"`;
		do
			a=`echo $i | sed 's/\.\/modules\///g' | xargs -n1 dirname`
			echo "$i /usr/include/${P_NAME}/${EDITION}/$a" >> ./debian/${P_NAME}-${EDITION}.install
		done

		for a in `echo "libnxs-cfg-json.a libnxs-curl.a libnxs-general.a libnxs-json.a libnxs-mysql.a libnxs-ncurses.a libnxs-rest-api.a libnxs-xml.a"`;
		do
			echo "./objs/$a /usr/lib/${P_NAME}/${EDITION}" >> ./debian/${P_NAME}-${EDITION}.install
		done

		echo "./nxs-fw-mods-desc.conf /usr/share/${P_NAME}/${EDITION}" >> ./debian/${P_NAME}-${EDITION}.install

		dpkg-buildpackage
	)
}

function clean_build_files()
{

	rm ../${P_NAME}-${EDITION}_${VER}.orig.tar.xz
}

case $command in

	build)

		build_package
		;;

	clean)

		clean_build_files
		;;

	*)

		echo "Unknown command: $command"
		;;
esac
